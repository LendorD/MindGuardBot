package len.group.MindGuardBot.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import len.group.MindGuardBot.config.BotConfig;
import len.group.MindGuardBot.dao.TaskRepository;
import len.group.MindGuardBot.dao.UserRepository;
import len.group.MindGuardBot.helper.ScheduleSession;
import len.group.MindGuardBot.models.Task;
import len.group.MindGuardBot.models.User;
import lombok.extern.slf4j.Slf4j;
import okhttp3.*;
import org.hibernate.Hibernate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.ParseMode;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.*;

@Slf4j
@Component
public class TelegramBot extends TelegramLongPollingBot {

    private final Map<Long, TaskState> userStates = new HashMap<>();
    private final Map<Long, Task> pendingTasks = new HashMap<>();

    private enum TaskState {
        AWAITING_DESCRIPTION,
        AWAITING_DATE_SELECTION,
        AWAITING_CUSTOM_DATE
    }

    private final BotConfig botConfig;

    private final UserRepository userRepository;
    private final TaskRepository taskRepository;

    private final Map<Long, ScheduleSession> userSessions = new HashMap<>();

    @Value("${together.api.key}")
    private String togetherApiKey;

    @Autowired
    public TelegramBot(BotConfig botConfig, UserRepository userRepository, TaskRepository taskRepository1) {
        this.userRepository = userRepository;
        this.taskRepository = taskRepository1;
        this.botConfig = botConfig;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String text = update.getMessage().getText();
            Long chatId = update.getMessage().getChatId();
            System.out.println(text);

            if (text.equals("/start")) {
                startCommandReceived(chatId, update.getMessage().getChat().getFirstName());
            } else if (text.equals("/reg")) {
                regUser(chatId, update.getMessage().getChat().getFirstName());
            } else if (text.equals("/addtask")) {
                startTaskCreation(chatId);  // üîπ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–¥–∞—á
            } else if (text.equals("/mytasks")) {
                handleMyTasks(chatId);
            } else if (text.equals("/gen_schedule")) {
                ScheduleSession session = new ScheduleSession();
                session.setStep(ScheduleSession.ScheduleStep.WAITING_FOR_SCHEDULE);
                userSessions.put(chatId, session);
                sendMessage(chatId, "üìÖ –ü—Ä–∏—à–ª–∏ —Å–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π (–≤ –ª—é–±–æ–º –≤–∏–¥–µ):");
                return;
            } else {
                // –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                if (userSessions.containsKey(chatId)) {
                    ScheduleSession session = userSessions.get(chatId);
                    switch (session.getStep()) {
                        case WAITING_FOR_SCHEDULE -> {
                            session.setRawSchedule(text);
                            session.setStep(ScheduleSession.ScheduleStep.WAITING_FOR_TASKS);
                            sendMessage(chatId, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!\n\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –∫–∞–∂–¥—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä:\n- –î–æ–º–∞—à–∫–∞ –ø–æ –¢–ê–∏–§–Ø ‚Äî 3—á\n- –ö—É—Ä—Å–æ–≤–∞—è ‚Äî 5—á)");
                            return;
                        }
                        case WAITING_FOR_TASKS -> {
                            session.setRawTasks(text);
                            sendMessage(chatId, "üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...");

                            String finalSchedule = callAiScheduler(session.getRawSchedule(), session.getRawTasks());

                            sendMessage(chatId, "üß† –í–æ—Ç —Ç–≤–æ—ë —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n" + finalSchedule);
                            userSessions.remove(chatId);
                            return;
                        }
                    }
                }
                // –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–¥–∞—á–∏
                TaskState state = userStates.get(chatId);
                if (state != null) {
                    switch (state) {
                        case AWAITING_DESCRIPTION:
                            processTaskDescription(chatId, text);
                            return;
                        case AWAITING_CUSTOM_DATE:
                            processCustomDate(chatId, text);
                            return;
                    }
                }
            }
        } else if (update.hasCallbackQuery()) {
            String callbackData = update.getCallbackQuery().getData();
            Integer messageId = update.getCallbackQuery().getMessage().getMessageId();
            Long chatId = update.getCallbackQuery().getMessage().getChatId();

            log.info("–ë—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {}", callbackData);

            if (callbackData.startsWith("SHOW_BUTTON_")) {
                String taskId = callbackData.split("_")[2];
                showTask(chatId, messageId, taskId);
            } else if (callbackData.startsWith("DEL_BUTTON_")) {
                String taskId = callbackData.split("_")[2];
                taskRepository.deleteById(Long.parseLong(taskId));

                DeleteMessage deleteMessage = new DeleteMessage();
                deleteMessage.setChatId(chatId.toString());
                deleteMessage.setMessageId(messageId);

                try {
                    execute(deleteMessage);
                } catch (TelegramApiException e) {
                    log.error("DEL Button –≤—ã–∑–≤–∞–ª–æ –æ—à–∏–±–∫—É: {}", e.getMessage());
                }

                handleMyTasks(chatId);
            } else if (callbackData.startsWith("EDIT_BUTTON_")) {
                String taskId = callbackData.split("_")[2];
            } else if (callbackData.startsWith("DATE_")) {
                processTaskDate(chatId, callbackData);
            }
        }
    }

    public String callAiScheduler(String schedule, String tasks) {
        String prompt = String.format("""
        –°–æ—Å—Ç–∞–≤—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        
        –í–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:
        %s

        –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏:
        %s

        –°–æ—Å—Ç–∞–≤—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é. –ù–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–π –ø–∞—Ä—ã, –∞ —Ç–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω—è–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏.
        –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Å–∏–≤–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä:
        –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:
        - 18:00‚Äì20:00: –ö—É—Ä—Å–æ–≤–∞—è
        
        –í—Ç–æ—Ä–Ω–∏–∫:
        - 17:00‚Äì19:00: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¢–ê–∏–§–Ø
        """, schedule, tasks);

        try {
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.get("application/json");
            String json = new ObjectMapper().writeValueAsString(Map.of(
                    "model", "meta-llama/Llama-3-70b-chat-hf",
                    "max_tokens", 500,
                    "temperature", 0.7,
                    "messages", List.of(
                            Map.of("role", "user", "content", prompt)
                    )
            ));

            Request request = new Request.Builder()
                    .url("https://api.together.xyz/v1/chat/completions")
                    .post(RequestBody.create(mediaType, json))
                    .addHeader("Authorization", "Bearer " + togetherApiKey)  // –∏–ª–∏ –ø–æ–¥—Å—Ç–∞–≤—å –Ω–∞–ø—Ä—è–º—É—é
                    .addHeader("Content-Type", "application/json")
                    .build();

            try (Response response = client.newCall(request).execute()) {
                if (!response.isSuccessful()) throw new IOException("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: " + response);

                String body = response.body().string();
                JsonNode root = new ObjectMapper().readTree(body);
                return root.get("choices").get(0).get("message").get("content").asText();
            }

        } catch (Exception e) {
            e.printStackTrace();
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.";
        }
    }



    private void startTaskCreation(Long chatId) {
        userStates.put(chatId, TaskState.AWAITING_DESCRIPTION);
        sendMessage(chatId, "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:");
    }

    private void processTaskDescription(Long chatId, String description) {
        userStates.put(chatId, TaskState.AWAITING_DATE_SELECTION);

        Task task = new Task();
        task.setDescription(description);
        pendingTasks.put(chatId, task);

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        rows.add(Collections.singletonList(createButton("üìÖ –°–µ–≥–æ–¥–Ω—è", "DATE_TODAY")));
        rows.add(Collections.singletonList(createButton("üìÜ –ó–∞–≤—Ç—Ä–∞", "DATE_TOMORROW")));
        rows.add(Collections.singletonList(createButton("üóì –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", "DATE_CUSTOM")));

        markup.setKeyboard(rows);
        sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", markup);
    }

    private InlineKeyboardButton createButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);
        return button;
    }

    private void processCustomDate(Long chatId, String text) {
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");
            LocalDateTime deadline = LocalDateTime.parse(text, formatter);

            Task task = pendingTasks.get(chatId);
            if (task != null) {
                saveTask(chatId, task, deadline);
            }
        } catch (DateTimeParseException e) {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ `DD.MM.YYYY HH:MM`.");
        }
    }

    private void processTaskDate(Long chatId, String callbackData) {
        Task task = pendingTasks.get(chatId);
        if (task == null) return;

        LocalDateTime deadline;
        if (callbackData.equals("DATE_TODAY")) {
            deadline = LocalDateTime.now().withHour(18).withMinute(0);
        } else if (callbackData.equals("DATE_TOMORROW")) {
            deadline = LocalDateTime.now().plusDays(1).withHour(18).withMinute(0);
        } else {
            userStates.put(chatId, TaskState.AWAITING_CUSTOM_DATE);
            sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ `DD.MM.YYYY HH:MM`:");
            return;
        }

        saveTask(chatId, task, deadline);
    }

    private void saveTask(Long chatId, Task task, LocalDateTime deadline) {
        task.setDeadline(deadline);
        task.setUser(userRepository.findByChatIdWithTasks(chatId));
        task.setCompleted(false);
        taskRepository.save(task);

        pendingTasks.remove(chatId);
        userStates.remove(chatId);

        sendMessage(chatId, "‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: " + task.getDescription() +
                "\nüìÖ –î–µ–¥–ª–∞–π–Ω: " + deadline.format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")));
    }


    @Transactional
    protected void showTask(Long chatId, Integer messId, String taskId) {
        Task task = taskRepository.findById(Long.parseLong(taskId))
                .orElseThrow( () -> new RuntimeException("Task not found"));
        User user = task.getUser();
        EditMessageText message = new EditMessageText();
        StringBuilder text = new StringBuilder("–í–∞—à–∞ –∑–∞–¥–∞—á–∞: \n");
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        List<InlineKeyboardButton> row = new ArrayList<>();
        var delButton = new InlineKeyboardButton();
        var editButton = new InlineKeyboardButton();
        delButton.setText("\uD83D\uDDD1");
        editButton.setText("\uD83D\uDCDD");

        delButton.setCallbackData("DEL_BUTTON_" + taskId);
        editButton.setCallbackData("EDIT_BUTTON_" + taskId);
        row.add(delButton);
        row.add(editButton);
        rows.add(row);
        
        inlineKeyboardMarkup.setKeyboard(rows);
        text.append(task.getDescription());
        text.append("\n –î–µ–¥–ª–∞–π–Ω:\n").append(task.getDeadline());
        message.setChatId(chatId);
        message.setText(text.toString());
        message.setMessageId(messId);
        message.setReplyMarkup(inlineKeyboardMarkup);
        try{
            execute(message);
        }catch (TelegramApiException e){
            e.printStackTrace();
        }
    }

    private void regUser(Long chatId, String username) {
        User user = new User();
        user.setChatId(chatId);
        if(userRepository.findByChatId(chatId) != null) sendMessage(chatId,"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");
        else {
            user.setFirstName(username);
            userRepository.save(user);
            sendMessage(chatId, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");
        }
    }

//    @Transactional
//    public void handleAddTask(Long chatId, String text) {
//        try {
//            // –§–æ—Ä–º–∞—Ç: /addtask –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ /–∑–∞–≤—Ç—Ä–∞ 18:00
//            String[] parts = text.split("/–∑–∞–≤—Ç—Ä–∞");
//            log.info(parts[0]);
//            String description = parts[0].replace("/addtask", "").trim();
//            LocalDateTime deadline = LocalDateTime.now()
//                    .plusDays(1)
//                    .withHour(18)
//                    .withMinute(0)
//                    .withSecond(0);
//
//            User user = userRepository.findByChatIdWithTasks(chatId);
//            Task task = new Task();
//            task.setDescription(description);
//            task.setDeadline(deadline);
//            task.setUser(user);
//            task.setCompleted(false);
//            System.out.println();
//            taskRepository.save(task);
//
//            sendMessage(chatId, "‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: " + description);
//        } catch (Exception e) {
//            e.printStackTrace();
//            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏( /reg ). –ò—Å–ø–æ–ª—å–∑—É–π: /addtask –û–ø–∏—Å–∞–Ω–∏–µ /–∑–∞–≤—Ç—Ä–∞ 18:00");
//        }
//    }


    private void handleMyTasks(Long chatId) {
        User user = userRepository.findByChatId(chatId);
        List<Task> tasks = taskRepository.getAllByUser(user);

        String text = "–í—ã—à–∏ –∑–∞–¥–∞—á–∏:\n";

        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        for (Task task : tasks) {
            log.info(task.toString());
            List<InlineKeyboardButton> row = new ArrayList<>();
            var button = new InlineKeyboardButton();
            if(task.getDescription().isEmpty()){
                button.setText("–ü—É—Å—Ç–∞—è –∑–∞–¥–∞—á–∞");
            }else  button.setText(task.getDescription());
            button.setCallbackData("SHOW_BUTTON_" + task.getId());

            row.add(button);
            rows.add(row);
        }
        inlineKeyboardMarkup.setKeyboard(rows);
        sendMessage(chatId, text, inlineKeyboardMarkup);
    }


    private void startCommandReceived(long chatId, String activeUsernames) {
        String text = "    –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –ª–∏—á–Ω—ã–π –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫\n" +
                "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å.\n" +
                "–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–≥—Ä–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ø–æ Jave –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞ —ç—Ç–æ –±–∞–ª–ª—ã.\n" +
                "–ë–∞–ª—ã —Ç—Ä–∞—Ç—å –Ω–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è (–°–ø–∏—Å–æ–∫ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π –∏ –Ω–∞–≥—Ä–∞–¥ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∞–º)\n";
        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup();
        List<KeyboardRow> rows = new ArrayList<>();
        KeyboardRow row = new KeyboardRow();
        row.add("Task");
        row.add("Shop");
        row.add("Java");
        rows.add(row);
        markup.setKeyboard(rows);
        markup.setResizeKeyboard(true);
        sendMessage(chatId, text, markup);
    }

    private void sendMessage(long chatId, String textToSend, ReplyKeyboard markup) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(textToSend);
        message.setParseMode(ParseMode.HTML);
        if (markup != null) message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
    private void sendMessage(long chatId, String textToSend) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(textToSend);
        message.enableHtml(true);
        message.setParseMode(ParseMode.HTML); // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTML
        try {
            execute(message);
        }catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    @Override
    public String getBotUsername() {
        return botConfig.getBotName();
    }

    @Override
    public String getBotToken() {
        return botConfig.getToken();
    }
}
